#!/bin/bash

function create_elder_droplets {
        echo "Creating elder droplets"
        for i in {1..5}; do
        echo $i
        doctl compute droplet create safe-testnet-elder-${i} \
                                --size s-4vcpu-8gb \
                                --image ubuntu-18-04-x64 \
                                --region lon1 \
                                --ssh-keys=[26400596,26204985,26204991,19315097,26204781,29201567,29586082,29690435] \
                                --wait
        done

        doctl compute droplet list 'safe-testnet-elder-*' --format "PublicIPv4" --no-header > elders-ip-list

        aws s3 cp elders-ip-list s3://safe-testnet-tool/elders-ip-list --acl public-read
}

function create_adult_droplets {
        echo "Creating adult droplets"
        ADULT_COUNT=${1:-6}    
        for i in $( seq 1 $ADULT_COUNT ); do
        echo $i
        doctl compute droplet create safe-testnet-adult-${i} \
                                --size s-4vcpu-8gb \
                                --image ubuntu-18-04-x64 \
                                --region lon1 \
                                --ssh-keys=[26400596,26204985,26204991,19315097,26204781,29201567,29586082,29690435] \
                                --wait
        done

        doctl compute droplet list 'safe-testnet-adult-*' --format "PublicIPv4" --no-header > adults-ip-list

        aws s3 cp adults-ip-list s3://safe-testnet-tool/adults-ip-list --acl public-read
}

function setup_doctl {
        if [[ -z "${DIGITAL_OCEAN_TOKEN}" ]]; then
                if [ ! -f ~/.config/doctl/config.yaml ]; then
                        echo "Not authorised with Digital Ocean"
                        echo "Set the DIGITAL_OCEAN_TOKEN env variable"
                        return 1
                fi
        fi
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
                sudo snap install doctl
        # ...
        elif [[ "$OSTYPE" == "darwin"* ]]; then
                # Mac OSX
                brew install doctl
        fi
        
        doctl auth init --access-token $DIGITAL_OCEAN_TOKEN
}

function destroy_all_droplets {

        NODE_COUNT=${1:-11}
        ELDER_COUNT=5
        adult_count=$(($NODE_COUNT-$ELDER_COUNT))

        setup_doctl

        for i in {1..5}; do
                doctl compute droplet delete "safe-testnet-elder-$i" -f
        done
        

        for i in $( seq 1 $adult_count ); do
                doctl compute droplet delete "safe-testnet-adult-$i" -f
        done

        echo "Droplets destroyed"
}

function register_hosts {
        while read -r ip
        do
                ssh-keyscan -H ${ip} >> ~/.ssh/known_hosts
        done < elders-ip-list

        while read -r ip
        do
                ssh-keyscan -H ${ip} >> ~/.ssh/known_hosts
        done < adults-ip-list
}

function clear_safe_data {
        for ip in $(<elders-ip-list xargs); do
                ssh -o "BatchMode yes" root@${ip} "pkill sn_node; rm -rf node_data; rm sn_node*" 1>"logs/$ip.log" 2>&1 &
        done
        wait
        for ip in $(<adults-ip-list xargs); do
                ssh -o "BatchMode yes" root@${ip} "pkill sn_node; rm -rf node_data; rm sn_node*" 1>"logs/$ip.log" 2>&1 &
        done
        wait
}

function fetch_ip_files {
        aws s3 cp s3://safe-testnet-tool/elders-ip-list ./
        aws s3 cp s3://safe-testnet-tool/adults-ip-list ./
}
